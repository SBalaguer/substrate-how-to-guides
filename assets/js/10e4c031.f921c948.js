(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{166:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return u})),n.d(t,"MDXProvider",(function(){return m})),n.d(t,"mdx",(function(){return h})),n.d(t,"useMDXComponents",(function(){return p})),n.d(t,"withMDXComponents",(function(){return d}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=o.a.createContext({}),d=function(e){return function(t){var n=p(t.components);return o.a.createElement(e,a({},t,{components:n}))}},p=function(e){var t=o.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,m=u["".concat(a,".").concat(d)]||u[d]||f[d]||i;return n?o.a.createElement(m,s(s({ref:t},l),{},{components:n})):o.a.createElement(m,s({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},39:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(3),o=n(8),i=(n(0),n(166)),a={sidebar_position:7,keywords:"basics, runtime"},l={unversionedId:"basics/helper-functions",id:"basics/helper-functions",isDocsHomePage:!1,title:"Using Pallet Helper Functions",description:"_ _",source:"@site/docs/01-basics/helper-functions.md",sourceDirName:"01-basics",slug:"/basics/helper-functions",permalink:"/substrate-how-to-guides/docs/basics/helper-functions",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/01-basics/helper-functions.md",version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,keywords:"basics, runtime"},sidebar:"tutorialSidebar",previous:{title:"Basic instantiable pallets",permalink:"/substrate-how-to-guides/docs/basics/basic-instantiable-pallets"},next:{title:"Create and use a struct in storage",permalink:"/substrate-how-to-guides/docs/pallet-design/storage-value-struct"}},s=[{value:"Goal",id:"goal",children:[]},{value:"Use cases",id:"use-cases",children:[]},{value:"Overview",id:"overview",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Create your helper function",id:"1-create-your-helper-function",children:[]},{value:"2. Use it in your pallet",id:"2-use-it-in-your-pallet",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Resources",id:"resources",children:[]}],c={toc:s};function u(e){var t=e.components,n=Object(o.default)(e,["components"]);return Object(i.mdx)("wrapper",Object(r.default)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("p",null,"_ _"),Object(i.mdx)("h2",{id:"goal"},"Goal"),Object(i.mdx)("p",null,"Include helper functions inside a pallet."),Object(i.mdx)("h2",{id:"use-cases"},"Use cases"),Object(i.mdx)("p",null,'Re-use helper functions to perform common "verify" checks across multiple pallets.'),Object(i.mdx)("h2",{id:"overview"},"Overview"),Object(i.mdx)("h2",{id:"steps"},"Steps"),Object(i.mdx)("h3",{id:"1-create-your-helper-function"},"1. Create your helper function"),Object(i.mdx)("p",null,"We'll showcase including the following helper to your pallet:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"fn _adder"),": Checks there is no overflow when adding two integers of type ",Object(i.mdx)("inlineCode",{parentName:"li"},"u32"),".")),Object(i.mdx)("p",null,"Add it at the end of your pallet:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},'impl<T: Config> Module<T> {\n    fn _adder(num1: u32, num2: u32) -> Result<u32, &\'static str> {\n        num1.checked_add(num2).ok_or("Overflow when adding")\n    }\n} \n')),Object(i.mdx)("h3",{id:"2-use-it-in-your-pallet"},"2. Use it in your pallet"),Object(i.mdx)("p",null,"Identify the places where you've needed to verify for overflow when performing an addition.\nUse the helper function instead, for example:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},'    // Extrinsics callable from outside the runtime.\n     #[pallet::call]\n    impl<T: Config> Pallet<T> {\n    #[pallet::weight(1_000)]\n\n    fn add_value(\n        origin: OriginFor<T>,\n        val_to_add: u32\n        ) -> DispatchResultWithPostInfo {\n            let _ = ensure_signed(origin)?;\n\n            ensure!(val_to_add <= T::MaxAddend::get(), "value must be <= maximum add amount constant");\n\n            // previous value got\n            let c_val = SingleValue::<T>::get();\n\n            // checks for overflow when new value added\n            let result = _adder(c_val, val_to_add); \n\n            <SingleValue<T>>::put(result);\n            Self::deposit_event(Event::Added(c_val, val_to_add, result));\n            Ok(().into())\n        }\n    }\n')),Object(i.mdx)("h2",{id:"examples"},"Examples"),Object(i.mdx)("h2",{id:"resources"},"Resources"),Object(i.mdx)("h4",{id:"rust-docs"},"Rust docs"))}u.isMDXComponent=!0}}]);